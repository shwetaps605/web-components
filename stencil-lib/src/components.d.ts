/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface UiSideDrawer {
        "open": boolean;
        "openDrawer": () => Promise<void>;
        "title": string;
    }
    interface UiSpinner {
    }
    interface UiStockFinder {
    }
    interface UiStockPrice {
        "stockSymbol": string;
    }
}
export interface UiStockFinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiStockFinderElement;
}
declare global {
    interface HTMLUiSideDrawerElement extends Components.UiSideDrawer, HTMLStencilElement {
    }
    var HTMLUiSideDrawerElement: {
        prototype: HTMLUiSideDrawerElement;
        new (): HTMLUiSideDrawerElement;
    };
    interface HTMLUiSpinnerElement extends Components.UiSpinner, HTMLStencilElement {
    }
    var HTMLUiSpinnerElement: {
        prototype: HTMLUiSpinnerElement;
        new (): HTMLUiSpinnerElement;
    };
    interface HTMLUiStockFinderElementEventMap {
        "uiSymbolSelected": string;
    }
    interface HTMLUiStockFinderElement extends Components.UiStockFinder, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiStockFinderElementEventMap>(type: K, listener: (this: HTMLUiStockFinderElement, ev: UiStockFinderCustomEvent<HTMLUiStockFinderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiStockFinderElementEventMap>(type: K, listener: (this: HTMLUiStockFinderElement, ev: UiStockFinderCustomEvent<HTMLUiStockFinderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiStockFinderElement: {
        prototype: HTMLUiStockFinderElement;
        new (): HTMLUiStockFinderElement;
    };
    interface HTMLUiStockPriceElement extends Components.UiStockPrice, HTMLStencilElement {
    }
    var HTMLUiStockPriceElement: {
        prototype: HTMLUiStockPriceElement;
        new (): HTMLUiStockPriceElement;
    };
    interface HTMLElementTagNameMap {
        "ui-side-drawer": HTMLUiSideDrawerElement;
        "ui-spinner": HTMLUiSpinnerElement;
        "ui-stock-finder": HTMLUiStockFinderElement;
        "ui-stock-price": HTMLUiStockPriceElement;
    }
}
declare namespace LocalJSX {
    interface UiSideDrawer {
        "open"?: boolean;
        "title"?: string;
    }
    interface UiSpinner {
    }
    interface UiStockFinder {
        "onUiSymbolSelected"?: (event: UiStockFinderCustomEvent<string>) => void;
    }
    interface UiStockPrice {
        "stockSymbol"?: string;
    }
    interface IntrinsicElements {
        "ui-side-drawer": UiSideDrawer;
        "ui-spinner": UiSpinner;
        "ui-stock-finder": UiStockFinder;
        "ui-stock-price": UiStockPrice;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-side-drawer": LocalJSX.UiSideDrawer & JSXBase.HTMLAttributes<HTMLUiSideDrawerElement>;
            "ui-spinner": LocalJSX.UiSpinner & JSXBase.HTMLAttributes<HTMLUiSpinnerElement>;
            "ui-stock-finder": LocalJSX.UiStockFinder & JSXBase.HTMLAttributes<HTMLUiStockFinderElement>;
            "ui-stock-price": LocalJSX.UiStockPrice & JSXBase.HTMLAttributes<HTMLUiStockPriceElement>;
        }
    }
}
